var searchIndex = {};
searchIndex['image'] = {"items":[[0,"","image","This crate provides native rust implementations of\nImage encoders and decoders and basic image manipulation\nfunctions."],[1,"Luma","","Grayscale colors"],[1,"LumaA","","Grayscale colors + alpha channel"],[1,"Rgb","","RGB colors"],[1,"Rgba","","RGB colors + alpha channel"],[1,"SubImage","","A View into another image"],[1,"ImageBuffer","","Generic image buffer"],[1,"Pixels","","Immutable pixel iterator"],[1,"MutPixels","","Mutable pixel iterator"],[1,"Frame","","A single animation frame"],[1,"Frames","","Hold the frames of the animated image"],[2,"ColorType","","An enumeration over supported color types and their bit depths"],[12,"Grey","","Pixel is greyscale",0],[12,"RGB","","Pixel contains R, G and B channels",0],[12,"Palette","","Pixel is an index into a color palette",0],[12,"GreyA","","Pixel is greyscale with an alpha channel",0],[12,"RGBA","","Pixel is RGB with an alpha channel",0],[2,"ImageError","","An enumeration of Image Errors"],[12,"FormatError","","The Image is not formatted properly",1],[12,"DimensionError","","The Image's dimensions are either too small or too large",1],[12,"UnsupportedError","","The Decoder does not support this image format",1],[12,"UnsupportedColor","","The Decoder does not support this color type",1],[12,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",1],[12,"IoError","","An I/O Error occurred while decoding the image",1],[12,"ImageEnd","","The end of the image has been reached",1],[2,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding."],[12,"PNG","","An Image in PNG Format",2],[12,"JPEG","","An Image in JPEG Format",2],[12,"GIF","","An Image in GIF Format",2],[12,"WEBP","","An Image in WEBP Format",2],[12,"PPM","","An Image in PPM Format",2],[12,"TIFF","","An Image in TIFF Format",2],[12,"TGA","","An Image in TGA Format",2],[2,"FilterType","","Available Sampling Filters"],[12,"Nearest","","Nearest Neighbor",3],[12,"Triangle","","Linear Filter",3],[12,"CatmullRom","","Cubic Filter",3],[12,"Gaussian","","Gaussian Filter",3],[12,"Lanczos3","","Lanczos with window 3",3],[2,"DynamicImage","","A Dynamic Image"],[12,"ImageLuma8","","Each pixel in this image is 8-bit Luma",4],[12,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",4],[12,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",4],[12,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",4],[3,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension."],[3,"load","","Create a new image from a Reader"],[3,"load_from_memory","","Create a new image from a byte slice"],[3,"save_buffer","","Saves the supplied buffer to a file at the path specified."],[0,"imageops","","Image Processing Functions"],[3,"rotate90","image::imageops","Rotate an image 90 degrees clockwise."],[3,"rotate180","","Rotate an image 180 degrees clockwise."],[3,"rotate270","","Rotate an image 270 degrees clockwise."],[3,"flip_horizontal","","Flip an image horizontally"],[3,"flip_vertical","","Flip an image vertically"],[3,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9."],[3,"resize","","Resize the supplied image to the specified dimensions\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use."],[3,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by."],[3,"unsharpen","","Performs an unsharpen mask on the supplied image\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking"],[3,"grayscale","","Convert the supplied image to grayscale"],[3,"invert","","Invert each pixel within the supplied image\nThis function operates in place."],[3,"contrast","","Adjust the contrast of the supplied image\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast."],[3,"brighten","","Brighten the supplied image\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it."],[3,"crop","","Return a mutable view into an image"],[3,"overlay","","Overlay an image at a given coordinate (x, y)"],[0,"webp","image","Decoding of Webp Images"],[1,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder."],[10,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",5],[10,"dimensions","","",5],[10,"colortype","","",5],[10,"row_len","","",5],[10,"read_scanline","","",5],[10,"read_image","","",5],[0,"vp8","","An implementation of the VP8 Video Codec"],[1,"Frame","image::webp::vp8","A Representation of the last decoded video frame"],[11,"width","","The width of the luma plane",6],[11,"height","","The height of the luma plane",6],[11,"ybuf","","The luma plane of the frame",6],[11,"keyframe","","Indicates whether this frame is a keyframe",6],[11,"for_display","","Indicates whether this frame is intended for display",6],[11,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",6],[1,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes"],[10,"clone","","",6],[10,"fmt","","",6],[10,"default","","",6],[10,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",7],[10,"decode_frame","","Decodes the current frame and returns a reference to it",7],[0,"ppm","image","Encoding of portable pixmap Images"],[1,"PPMEncoder","image::ppm","A representation of a PPM encoder."],[10,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",8],[10,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",8],[0,"png","image","Decoding and Encoding of PNG Images"],[1,"PNGDecoder","image::png","The representation of a PNG decoder"],[1,"PNGEncoder","","The representation of a PNG encoder"],[10,"new","","Create a new decoder that decodes from the stream ```r```",9],[10,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",9],[10,"dimensions","","",9],[10,"colortype","","",9],[10,"row_len","","",9],[10,"read_scanline","","",9],[10,"read_image","","",9],[10,"new","","Create a new encoder that writes its output to ```w```",10],[10,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",10],[0,"zlib","","An Implementation of RFC 1950"],[1,"ZlibDecoder","image::png::zlib","A Zlib compressed stream decoder."],[10,"new","","Create a new decoder that decodes from a Reader",11],[10,"inner","","Return a mutable reference to the wrapped Reader",11],[10,"read","","",11],[0,"deflate","image::png","An Implementation of RFC 1951"],[1,"Inflater","image::png::deflate","A DEFLATE compressed stream decoder."],[10,"new","","Create a new decoder that decodes from a Reader",12],[10,"eof","","Indicate whether the end of the stream has been reached.",12],[10,"inner","","Return a mutable reference to the wrapped Reader",12],[10,"read","","",12],[0,"hash","image::png","This module provides implementations of common hashing algorithms."],[1,"Adler32","image::png::hash","An Implementation of the Adler-32 checksum"],[1,"Crc32","","An Implementation of the Crc-32 checksum"],[10,"new","","Create a new hasher.",13],[10,"update","","Update the internal hasher with the bytes from ```buf```",13],[10,"checksum","","Return the computed hash.",13],[10,"reset","","Reset this hasher to its initial state.",13],[10,"new","","Create a new hasher.",14],[10,"update","","Update the internal hasher with the bytes from ```buf```",14],[10,"checksum","","Return the computed hash.",14],[10,"reset","","Reset this hasher to its initial state.",14],[0,"jpeg","image","Decoding and Encoding of JPEG Images"],[1,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder"],[1,"JPEGEncoder","","The representation of a JPEG encoder"],[1,"Component","","A representation of a JPEG component"],[11,"id","","The Component's identifier",15],[11,"h","","Horizontal sampling factor",15],[11,"v","","Vertical sampling factor",15],[11,"tq","","The quantization table selector",15],[11,"dc_table","","Index to the Huffman DC Table",15],[11,"ac_table","","Index to the AC Huffman Table",15],[11,"dc_pred","","The dc prediction of the component",15],[10,"new","","Create a new encoder that writes its output to ```w```",16],[10,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",16],[10,"clone","","",15],[10,"new","","Create a new decoder that decodes from the stream ```r```",17],[10,"dimensions","","",17],[10,"colortype","","",17],[10,"row_len","","",17],[10,"read_scanline","","",17],[10,"read_image","","",17],[0,"gif","image","Decoding of GIF Images"],[1,"GIFDecoder","image::gif","A gif decoder"],[10,"new","","Creates a new GIF decoder",18],[10,"dimensions","","",18],[10,"colortype","","",18],[10,"row_len","","",18],[10,"read_scanline","","",18],[10,"read_image","","",18],[0,"lzw","","This modules provides an implementation of the Lempel–Ziv–Welch Compression Algorithm"],[3,"decode","image::gif::lzw","Decodes a lzw compressed stream"],[0,"tiff","image","Decoding and Encoding of TIFF Images"],[1,"TIFFDecoder","image::tiff","The representation of a PNG decoder"],[2,"ByteOrder","","Byte order of the TIFF file."],[12,"LittleEndian","","little endian byte order",19],[12,"BigEndian","","big endian byte order",19],[10,"fmt","","",19],[10,"fmt","","",20],[10,"new","","Create a new decoder that decodes from the stream ```r```",20],[10,"init","","Initializes the decoder.",20],[10,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",20],[10,"more_images","","Returns `true` if there is at least one more image available.",20],[10,"byte_order","","Returns the byte_order",20],[10,"read_short","","Reads a TIFF short value",20],[10,"read_long","","Reads a TIFF long value",20],[10,"read_offset","","Reads a TIFF IFA offset/value field",20],[10,"goto_offset","","Moves the cursor to the specified offset",20],[10,"dimensions","","",20],[10,"colortype","","",20],[10,"row_len","","",20],[10,"read_scanline","","",20],[10,"read_image","","",20],[0,"tga","image","Decoding of TGA Images"],[1,"TGADecoder","image::tga","The representation of a TGA decoder"],[10,"new","","Create a new decoder that decodes from the stream `r`",21],[10,"dimensions","","",21],[10,"colortype","","",21],[10,"row_len","","",21],[10,"read_scanline","","",21],[10,"read_image","","",21],[10,"eq","image","",1],[10,"ne","","",1],[10,"fmt","","",1],[10,"from_error","","",1],[10,"fmt","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"next","","",22],[10,"next","","",23],[10,"new","","Construct a new subimage",24],[10,"inner_mut","","Returns a mutable reference to the wrapped image.",24],[10,"change_bounds","","Change the coordinates of this subimage.",24],[10,"to_image","","Convert this subimage to an ImageBuffer",24],[10,"dimensions","","",24],[10,"bounds","","",24],[10,"get_pixel","","",24],[10,"put_pixel","","",24],[10,"blend_pixel","","",24],[10,"get_pixel_mut","","",24],[10,"to_rgb","","Returns a copy of this image as an RGB image.",4],[10,"to_rgba","","Returns a copy of this image as an RGBA image.",4],[10,"to_luma","","Returns a copy of this image as a Luma image.",4],[10,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",4],[10,"crop","","Return a cut out of this image delimited by the bounding rectangle.",4],[10,"as_rgb8","","Return a reference to an 8bit RGB image",4],[10,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",4],[10,"as_rgba8","","Return a reference to an 8bit RGBA image",4],[10,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",4],[10,"as_luma8","","Return a reference to an 8bit Grayscale image",4],[10,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",4],[10,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",4],[10,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",4],[10,"raw_pixels","","Return this image's pixels as a byte vector.",4],[10,"color","","Return this image's color type.",4],[10,"grayscale","","Return a grayscale version of this image.",4],[10,"invert","","Invert the colors of this image.\nThis method operates inplace.",4],[10,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[10,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[10,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",4],[10,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",4],[10,"filter3x3","","Filters this image with the specified 3x3 kernel.",4],[10,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",4],[10,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",4],[10,"flipv","","Flip this image vertically",4],[10,"fliph","","Flip this image horizontally",4],[10,"rotate90","","Rotate this image 90 degrees clockwise.",4],[10,"rotate180","","Rotate this image 180 degrees clockwise.",4],[10,"rotate270","","Rotate this image 270 degrees clockwise.",4],[10,"save","","Encode this image and write it to ```w```",4],[10,"dimensions","","",4],[10,"bounds","","",4],[10,"get_pixel","","",4],[10,"put_pixel","","",4],[10,"blend_pixel","","",4],[10,"get_pixel_mut","","",4],[10,"clone","","",0],[10,"fmt","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"fmt","","",25],[10,"clone","","",25],[10,"eq","","",25],[10,"ne","","",25],[10,"channel_count","","",25],[10,"color_model","","",25],[10,"channels","","",25],[10,"channels_mut","","",25],[10,"channels4","","",25],[10,"from_channels","","",25],[10,"from_slice","","",25],[10,"from_slice_mut","","",25],[10,"to_rgb","","",25],[10,"to_rgba","","",25],[10,"to_luma","","",25],[10,"to_luma_alpha","","",25],[10,"map","","",25],[10,"apply","","",25],[10,"map_with_alpha","","",25],[10,"apply_with_alpha","","",25],[10,"map2","","",25],[10,"apply2","","",25],[10,"invert","","",25],[10,"blend","","",25],[10,"index","","",25],[10,"index_mut","","",25],[10,"fmt","","",26],[10,"clone","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"channel_count","","",26],[10,"color_model","","",26],[10,"channels","","",26],[10,"channels_mut","","",26],[10,"channels4","","",26],[10,"from_channels","","",26],[10,"from_slice","","",26],[10,"from_slice_mut","","",26],[10,"to_rgb","","",26],[10,"to_rgba","","",26],[10,"to_luma","","",26],[10,"to_luma_alpha","","",26],[10,"map","","",26],[10,"apply","","",26],[10,"map_with_alpha","","",26],[10,"apply_with_alpha","","",26],[10,"map2","","",26],[10,"apply2","","",26],[10,"invert","","",26],[10,"blend","","",26],[10,"index","","",26],[10,"index_mut","","",26],[10,"fmt","","",27],[10,"clone","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"channel_count","","",27],[10,"color_model","","",27],[10,"channels","","",27],[10,"channels_mut","","",27],[10,"channels4","","",27],[10,"from_channels","","",27],[10,"from_slice","","",27],[10,"from_slice_mut","","",27],[10,"to_rgb","","",27],[10,"to_rgba","","",27],[10,"to_luma","","",27],[10,"to_luma_alpha","","",27],[10,"map","","",27],[10,"apply","","",27],[10,"map_with_alpha","","",27],[10,"apply_with_alpha","","",27],[10,"map2","","",27],[10,"apply2","","",27],[10,"invert","","",27],[10,"blend","","",27],[10,"index","","",27],[10,"index_mut","","",27],[10,"fmt","","",28],[10,"clone","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"channel_count","","",28],[10,"color_model","","",28],[10,"channels","","",28],[10,"channels_mut","","",28],[10,"channels4","","",28],[10,"from_channels","","",28],[10,"from_slice","","",28],[10,"from_slice_mut","","",28],[10,"to_rgb","","",28],[10,"to_rgba","","",28],[10,"to_luma","","",28],[10,"to_luma_alpha","","",28],[10,"map","","",28],[10,"apply","","",28],[10,"map_with_alpha","","",28],[10,"apply_with_alpha","","",28],[10,"map2","","",28],[10,"apply2","","",28],[10,"invert","","",28],[10,"blend","","",28],[10,"index","","",28],[10,"index_mut","","",28],[10,"from_color","","",26],[10,"from_color","","",26],[10,"from_color","","",26],[10,"from_color","","",28],[10,"from_color","","",28],[10,"from_color","","",28],[10,"from_color","","",27],[10,"from_color","","",27],[10,"from_color","","",27],[10,"from_color","","",25],[10,"from_color","","",25],[10,"from_color","","",25],[10,"blend","","",28],[10,"blend","","",26],[10,"blend","","",27],[10,"blend","","",25],[10,"invert","","",28],[10,"invert","","",26],[10,"invert","","",27],[10,"invert","","",25],[10,"as_mut_slice","collections::vec","",29],[10,"from_raw","image","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",30],[10,"into_raw","","Returns the underlying raw buffer",30],[10,"dimensions","","The width and height of this image.",30],[10,"width","","The width of this image.",30],[10,"height","","The height of this image.",30],[10,"as_slice","","The raw image data as a slice.",30],[10,"as_mut_slice","","The raw image data as a slice.",30],[10,"pixels","","Returns an iterator over the pixels of this image.",30],[10,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",30],[10,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",30],[10,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",30],[10,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",30],[10,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",30],[10,"put_pixel","","Puts a pixel at location `(x, y)`",30],[10,"into_dynamic","","Casts the buffer into a dynamically typed image buffer",30],[10,"clone","","",30],[10,"dimensions","","",30],[10,"bounds","","",30],[10,"get_pixel","","",30],[10,"get_pixel_mut","","",30],[10,"put_pixel","","",30],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",30],[10,"index","","",30],[10,"new","","Creates a new image buffer based on a `Vec<T>`.",30],[10,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",30],[10,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",30],[10,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",30],[10,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",30],[10,"convert","","",30],[10,"new","","Contructs a new frame iterator",31],[10,"clone","","",32],[10,"new","","Contructs a new frame",32],[10,"from_parts","","Contructs a new frame",32],[10,"delay","","Delay of this frame",32],[10,"buffer","","Returns the image buffer",32],[10,"into_buffer","","Returns the image buffer",32],[10,"left","","Returns the x offset",32],[10,"top","","Returns the x offset",32],[10,"next","","",31],[4,"ImageResult","","Result of an image decoding/encoding process"],[4,"RgbImage","","Sendable Rgb image buffer"],[4,"RgbaImage","","Sendable Rgb + alpha channel image buffer"],[4,"GreyImage","","Sendable grayscale image buffer"],[4,"GreyAlphaImage","","Sendable grayscale + alpha channel image buffer"],[6,"Primitive","","Primitive trait from old stdlib, added max_value"],[9,"max_value","","The maximum value of primitive.",33],[6,"Pixel","","A generalized pixel."],[9,"channel_count","","Returns the number of channels of this pixel type.",34],[9,"channels","","Returns the components as a slice.",34],[9,"channels_mut","","Returns the components as a mutable slice",34],[9,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",34],[9,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value\nTODO deprecate",34],[9,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.\nTODO deprecate",34],[9,"from_slice","","Returns a view into a slice.",34],[9,"from_slice_mut","","Returns mutable view into a mutable slice.",34],[9,"to_rgb","","Convert this pixel to RGB",34],[9,"to_rgba","","Convert this pixel to RGB with an alpha channel",34],[9,"to_luma","","Convert this pixel to luma",34],[9,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",34],[9,"map","","Apply the function ```f``` to each channel of this pixel.",34],[9,"apply","","Apply the function ```f``` to each channel of this pixel.",34],[9,"map_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel.",34],[9,"apply_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel. Works in-place.",34],[9,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",34],[9,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",34],[9,"invert","","Invert this pixel",34],[9,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",34],[6,"ImageDecoder","","The trait that all decoders implement"],[9,"dimensions","","Returns a tuple containing the width and height of the image",35],[9,"colortype","","Returns the color type of the image e.g RGB(8) (8bit RGB)",35],[9,"row_len","","Returns the length in bytes of one decoded row of the image",35],[10,"is_animated","","Returns true if the image is animated",35],[10,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",35],[9,"read_scanline","","Reads one row from the image into buf and returns the row index",35],[9,"read_image","","Decodes the entire image and return it as a Vector",35],[10,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",35],[6,"GenericImage","","A trait for manipulating images."],[9,"dimensions","","The width and height of this image.",36],[9,"bounds","","The bounding rectangle of this image.",36],[9,"get_pixel","","Returns the pixel located at (x, y)",36],[9,"get_pixel_mut","","Puts a pixel at location (x, y)",36],[9,"put_pixel","","Put a pixel at location (x, y)",36],[9,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",36],[10,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",36],[10,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36],[10,"is_animated","","Returns true if the image is animated",35],[10,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",35],[10,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",35],[10,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",36],[10,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36],[10,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to \nadjust it's alpha value accordingly.",37]],"paths":[[2,"ColorType"],[2,"ImageError"],[2,"ImageFormat"],[2,"FilterType"],[2,"DynamicImage"],[1,"WebpDecoder"],[1,"Frame"],[1,"VP8Decoder"],[1,"PPMEncoder"],[1,"PNGDecoder"],[1,"PNGEncoder"],[1,"ZlibDecoder"],[1,"Inflater"],[1,"Adler32"],[1,"Crc32"],[1,"Component"],[1,"JPEGEncoder"],[1,"JPEGDecoder"],[1,"GIFDecoder"],[2,"ByteOrder"],[1,"TIFFDecoder"],[1,"TGADecoder"],[1,"Pixels"],[1,"MutPixels"],[1,"SubImage"],[1,"Rgb"],[1,"Luma"],[1,"Rgba"],[1,"LumaA"],[1,"Vec"],[1,"ImageBuffer"],[1,"Frames"],[1,"Frame"],[6,"Primitive"],[6,"Pixel"],[6,"ImageDecoder"],[6,"GenericImage"],[4,"GreyImage"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[3,"zero","","Returns the additive identity, `0`."],[3,"one","","Returns the multiplicative identity, `1`."],[3,"abs","","Computes the absolute value."],[3,"abs_sub","","The positive difference of two numbers."],[3,"signum","","Returns the sign of the number."],[3,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[1,"BigUint","num::bigint","A big unsigned integer type."],[1,"BigInt","","A big signed integer type."],[2,"Sign","","A Sign is a `BigInt`'s composing element."],[12,"Minus","","",0],[12,"NoSign","","",0],[12,"Plus","","",0],[0,"BigDigit","",""],[3,"from_doublebigdigit","num::bigint::BigDigit","Split one `DoubleBigDigit` into two `BigDigit`s."],[3,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[18,"BITS","",""],[18,"BASE","",""],[4,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[4,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[18,"ZERO_BIG_DIGIT","",""],[6,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[9,"to_biguint","","Converts the value of `self` to a `BigUint`.",1],[6,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[9,"to_bigint","","Converts the value of `self` to a `BigInt`.",2],[6,"RandBigInt","",""],[9,"gen_biguint","","Generate a random `BigUint` of the given bit size.",3],[9,"gen_bigint","","Generate a random BigInt of the given bit size.",3],[9,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",3],[9,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[9,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[10,"decode","","",4],[10,"encode","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"partial_cmp","","",4],[10,"cmp","","",4],[10,"default","","",4],[10,"hash","","",4],[10,"fmt","","",4],[10,"from_str","","",4],[10,"bitand","","",4],[10,"bitand","","",4],[10,"bitor","","",4],[10,"bitor","","",4],[10,"bitxor","","",4],[10,"bitxor","","",4],[10,"shl","","",4],[10,"shr","","",4],[10,"zero","","",4],[10,"is_zero","","",4],[10,"one","","",4],[10,"add","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"sub","","",4],[10,"mul","","",4],[10,"mul","","",4],[10,"div","","",4],[10,"div","","",4],[10,"rem","","",4],[10,"rem","","",4],[10,"neg","","",4],[10,"checked_add","","",4],[10,"checked_sub","","",4],[10,"checked_mul","","",4],[10,"checked_div","","",4],[10,"div_rem","","",4],[10,"div_floor","","",4],[10,"mod_floor","","",4],[10,"div_mod_floor","","",4],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",4],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",4],[10,"divides","","Deprecated, use `is_multiple_of` instead.",4],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4],[10,"is_even","","Returns `true` if the number is divisible by `2`.",4],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",4],[10,"to_i64","","",4],[10,"to_u64","","",4],[10,"from_i64","","",4],[10,"from_u64","","",4],[10,"to_biguint","","",5],[10,"to_biguint","","",4],[10,"from_str_radix","","Creates and initializes a `BigUint`.",4],[10,"new","","Creates and initializes a `BigUint`.",4],[10,"from_slice","","Creates and initializes a `BigUint`.",4],[10,"parse_bytes","","Creates and initializes a `BigUint`.",4],[10,"bits","","Determines the fewest bits necessary to express the `BigUint`.",4],[10,"decode","","",0],[10,"encode","","",0],[10,"fmt","","",0],[10,"clone","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"neg","","Negate Sign value.",0],[10,"decode","","",5],[10,"encode","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"partial_cmp","","",5],[10,"cmp","","",5],[10,"default","","",5],[10,"fmt","","",5],[10,"hash","","",5],[10,"from_str","","",5],[10,"shl","","",5],[10,"shr","","",5],[10,"zero","","",5],[10,"is_zero","","",5],[10,"one","","",5],[10,"abs","","",5],[10,"abs_sub","","",5],[10,"signum","","",5],[10,"is_positive","","",5],[10,"is_negative","","",5],[10,"add","","",5],[10,"add","","",5],[10,"sub","","",5],[10,"sub","","",5],[10,"mul","","",5],[10,"mul","","",5],[10,"div","","",5],[10,"div","","",5],[10,"rem","","",5],[10,"rem","","",5],[10,"neg","","",5],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[10,"div_rem","","",5],[10,"div_floor","","",5],[10,"mod_floor","","",5],[10,"div_mod_floor","","",5],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[10,"divides","","Deprecated, use `is_multiple_of` instead.",5],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[10,"is_even","","Returns `true` if the number is divisible by `2`.",5],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[10,"to_i64","","",5],[10,"to_u64","","",5],[10,"from_i64","","",5],[10,"from_u64","","",5],[10,"to_bigint","","",5],[10,"to_bigint","","",4],[10,"from_str_radix","","Creates and initializes a BigInt.",5],[10,"new","","Creates and initializes a BigInt.",5],[10,"from_biguint","","Creates and initializes a `BigInt`.",5],[10,"from_slice","","Creates and initializes a `BigInt`.",5],[10,"parse_bytes","","Creates and initializes a `BigInt`.",5],[10,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",5],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[0,"complex","num","Complex numbers."],[1,"Complex","num::complex","A complex number in Cartesian form."],[11,"re","","Real portion of the complex number",6],[11,"im","","Imaginary portion of the complex number",6],[4,"Complex32","",""],[4,"Complex64","",""],[10,"decode","","",6],[10,"encode","","",6],[10,"hash","","",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"new","","Create a new Complex",6],[10,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6],[10,"conj","","Returns the complex conjugate. i.e. `re - i im`",6],[10,"scale","","Multiplies `self` by the scalar `t`.",6],[10,"unscale","","Divides `self` by the scalar `t`.",6],[10,"inv","","Returns `1/self`",6],[10,"norm","","Calculate |self|",6],[10,"arg","","Calculate the principal Arg of self.",6],[10,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6],[10,"from_polar","","Convert a polar representation into a complex number.",6],[10,"add","","",6],[10,"add","","",6],[10,"sub","","",6],[10,"sub","","",6],[10,"mul","","",6],[10,"mul","","",6],[10,"div","","",6],[10,"div","","",6],[10,"neg","","",6],[10,"zero","","",6],[10,"is_zero","","",6],[10,"one","","",6],[10,"fmt","","",6],[0,"integer","num","Integer trait and functions."],[3,"div_rem","num::integer","Simultaneous integer division and modulus"],[3,"div_floor","","Floored integer division"],[3,"mod_floor","","Floored integer modulus"],[3,"div_mod_floor","","Simultaneous floored integer division and modulus"],[3,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[3,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[6,"Integer","",""],[9,"div_floor","","Floored integer division.",7],[9,"mod_floor","","Floored integer modulo, satisfying:",7],[9,"gcd","","Greatest Common Divisor (GCD).",7],[9,"lcm","","Lowest Common Multiple (LCM).",7],[9,"divides","","Deprecated, use `is_multiple_of` instead.",7],[9,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7],[9,"is_even","","Returns `true` if the number is even.",7],[9,"is_odd","","Returns `true` if the number is odd.",7],[9,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7],[10,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7],[0,"iter","num","External iterators for generic mathematics"],[1,"Range","num::iter","An iterator over the range [start, stop)"],[1,"RangeInclusive","","An iterator over the range [start, stop]"],[1,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[1,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[10,"clone","","",8],[10,"next","","",8],[10,"size_hint","","",8],[10,"next_back","","",8],[10,"clone","","",9],[10,"next","","",9],[10,"size_hint","","",9],[10,"next_back","","",9],[10,"clone","","",10],[10,"next","","",10],[10,"clone","","",11],[10,"next","","",11],[0,"traits","num","Numeric traits for generic mathematics"],[6,"Num","num::traits","The base trait for numeric types"],[6,"Zero","","Defines an additive identity element for `Self`."],[9,"zero","","Returns the additive identity element of `Self`, `0`.",12],[9,"is_zero","","Returns `true` if `self` is equal to the additive identity.",12],[6,"One","","Defines a multiplicative identity element for `Self`."],[9,"one","","Returns the multiplicative identity element of `Self`, `1`.",13],[6,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[9,"abs","","Computes the absolute value.",14],[9,"abs_sub","","The positive difference of two numbers.",14],[9,"signum","","Returns the sign of the number.",14],[9,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",14],[9,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",14],[6,"Unsigned","","A trait for values which cannot be negative"],[6,"Bounded","","Numbers which have upper and lower bounds"],[9,"min_value","","returns the smallest finite number this type can represent",15],[9,"max_value","","returns the largest finite number this type can represent",15],[6,"Saturating","","Saturating math operations"],[9,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",16],[9,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",16],[6,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[9,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",17],[6,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[9,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",18],[6,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[9,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",19],[6,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[9,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",20],[0,"rational","num","Rational numbers"],[1,"Ratio","num::rational","Represents the ratio between 2 numbers."],[4,"Rational","","Alias for a `Ratio` of machine-sized integers."],[4,"Rational32","",""],[4,"Rational64","",""],[4,"BigRational","","Alias for arbitrary precision rationals."],[10,"decode","","",21],[10,"encode","","",21],[10,"hash","","",21],[10,"clone","","",21],[10,"from_integer","","Creates a ratio representing the integer `t`.",21],[10,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",21],[10,"new","","Create a new Ratio. Fails if `denom == 0`.",21],[10,"to_integer","","Converts to an integer.",21],[10,"numer","","Gets an immutable reference to the numerator.",21],[10,"denom","","Gets an immutable reference to the denominator.",21],[10,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",21],[10,"reduced","","Returns a `reduce`d copy of self.",21],[10,"recip","","Returns the reciprocal.",21],[10,"floor","","Rounds towards minus infinity.",21],[10,"ceil","","Rounds towards plus infinity.",21],[10,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",21],[10,"trunc","","Rounds towards zero.",21],[10,"fract","","Returns the fractional part of a number.",21],[10,"from_float","","Converts a float into a rational number.",21],[10,"eq","","",21],[10,"ne","","",21],[10,"lt","","",21],[10,"gt","","",21],[10,"le","","",21],[10,"ge","","",21],[10,"partial_cmp","","",21],[10,"cmp","","",21],[10,"mul","","",21],[10,"mul","","",21],[10,"div","","",21],[10,"div","","",21],[10,"add","","",21],[10,"add","","",21],[10,"sub","","",21],[10,"sub","","",21],[10,"rem","","",21],[10,"rem","","",21],[10,"neg","","",21],[10,"zero","","",21],[10,"is_zero","","",21],[10,"one","","",21],[10,"abs","","",21],[10,"abs_sub","","",21],[10,"signum","","",21],[10,"is_positive","","",21],[10,"is_negative","","",21],[10,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",21],[10,"from_str","","Parses `numer/denom` or just `numer`.",21],[10,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",21]],"paths":[[2,"Sign"],[6,"ToBigUint"],[6,"ToBigInt"],[6,"RandBigInt"],[1,"BigUint"],[1,"BigInt"],[1,"Complex"],[6,"Integer"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[6,"Zero"],[6,"One"],[6,"Signed"],[6,"Bounded"],[6,"Saturating"],[6,"CheckedAdd"],[6,"CheckedSub"],[6,"CheckedMul"],[6,"CheckedDiv"],[1,"Ratio"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[10,"encode","collections::dlist","",10],[10,"decode","","",10],[10,"encode","collections::ring_buf","",11],[10,"decode","","",11],[10,"encode","collections::btree::map","",12],[10,"decode","","",12],[10,"encode","collections::btree::set","",13],[10,"decode","","",13],[10,"encode","collections::enum_set","",14],[10,"decode","","",14],[10,"encode","std::collections::hash::map","",15],[10,"decode","","",15],[10,"encode","std::collections::hash::set","",16],[10,"decode","","",16],[10,"encode","collections::vec_map","",17],[10,"decode","","",17],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[1,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[11,"char_set","","Character set to use",18],[11,"newline","","Newline to use",18],[11,"pad","","True to pad output with `=` characters",18],[11,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18],[2,"CharacterSet","","Available encoding character sets"],[12,"Standard","","The standard character set (uses `+` and `/`)",19],[12,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19],[2,"Newline","","Available newline types"],[12,"LF","","A linefeed (i.e. Unix-style newline)",20],[12,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20],[2,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[12,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21],[12,"InvalidBase64Length","","The input had an invalid length",21],[5,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[5,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[5,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[6,"ToBase64","","A trait for converting a value to base64 encoding."],[9,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22],[6,"FromBase64","","A trait for converting from base64 encoded values."],[9,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23],[10,"fmt","","",21],[10,"description","","",21],[10,"detail","","",21],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[2,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[12,"InvalidHexCharacter","","The input contained a character not part of the hex format",24],[12,"InvalidHexLength","","The input had an invalid length",24],[6,"ToHex","","A trait for converting a value to hexadecimal encoding"],[9,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25],[6,"FromHex","","A trait for converting hexadecimal encoded values"],[9,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26],[10,"fmt","","",24],[10,"description","","",24],[10,"detail","","",24],[0,"json","rustc-serialize","JSON parsing and serialization"],[1,"Encoder","rustc-serialize::json","A structure for implementing serialization to JSON."],[1,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[1,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[1,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[1,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[1,"Decoder","","A structure to decode JSON to values in rust."],[2,"Json","","Represents a json value"],[12,"I64","","",27],[12,"U64","","",27],[12,"F64","","",27],[12,"String","","",27],[12,"Boolean","","",27],[12,"Array","","",27],[12,"Object","","",27],[12,"Null","","",27],[2,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[12,"InvalidSyntax","","",28],[12,"InvalidNumber","","",28],[12,"EOFWhileParsingObject","","",28],[12,"EOFWhileParsingArray","","",28],[12,"EOFWhileParsingValue","","",28],[12,"EOFWhileParsingString","","",28],[12,"KeyMustBeAString","","",28],[12,"ExpectedColon","","",28],[12,"TrailingCharacters","","",28],[12,"TrailingComma","","",28],[12,"InvalidEscape","","",28],[12,"InvalidUnicodeCodePoint","","",28],[12,"LoneLeadingSurrogateInHexEscape","","",28],[12,"UnexpectedEndOfHexEscape","","",28],[12,"UnrecognizedHex","","",28],[12,"NotFourDigit","","",28],[12,"NotUtf8","","",28],[2,"ParserError","",""],[12,"SyntaxError","","msg, line, col",29],[12,"IoError","","",29],[2,"DecoderError","",""],[12,"ParseError","","",30],[12,"ExpectedError","","",30],[12,"MissingFieldError","","",30],[12,"UnknownVariantError","","",30],[12,"ApplicationError","","",30],[2,"JsonEvent","","The output of the streaming parser."],[12,"ObjectStart","","",31],[12,"ObjectEnd","","",31],[12,"ArrayStart","","",31],[12,"ArrayEnd","","",31],[12,"BooleanValue","","",31],[12,"I64Value","","",31],[12,"U64Value","","",31],[12,"F64Value","","",31],[12,"StringValue","","",31],[12,"NullValue","","",31],[12,"Error","","",31],[2,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[12,"Index","","",32],[12,"Key","","",32],[3,"error_str","","Returns a readable error string for a given error code."],[3,"decode","","Shortcut function to decode a JSON `&str` into an object"],[3,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[3,"escape_bytes","",""],[4,"Array","",""],[4,"Object","",""],[4,"BuilderError","",""],[4,"EncodeResult","",""],[4,"DecodeResult","",""],[6,"ToJson","","A trait for converting values to JSON"],[9,"to_json","","Converts the value of `self` to an instance of JSON",33],[10,"partial_cmp","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",28],[10,"fmt","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"fmt","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"clone","","",30],[10,"fmt","","",28],[10,"description","","",30],[10,"detail","","",30],[10,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",34],[10,"buffer_encode","","Encode the specified struct into a json [u8]",34],[10,"emit_nil","","",34],[10,"emit_uint","","",34],[10,"emit_u64","","",34],[10,"emit_u32","","",34],[10,"emit_u16","","",34],[10,"emit_u8","","",34],[10,"emit_int","","",34],[10,"emit_i64","","",34],[10,"emit_i32","","",34],[10,"emit_i16","","",34],[10,"emit_i8","","",34],[10,"emit_bool","","",34],[10,"emit_f64","","",34],[10,"emit_f32","","",34],[10,"emit_char","","",34],[10,"emit_str","","",34],[10,"emit_enum","","",34],[10,"emit_enum_variant","","",34],[10,"emit_enum_variant_arg","","",34],[10,"emit_enum_struct_variant","","",34],[10,"emit_enum_struct_variant_field","","",34],[10,"emit_struct","","",34],[10,"emit_struct_field","","",34],[10,"emit_tuple","","",34],[10,"emit_tuple_arg","","",34],[10,"emit_tuple_struct","","",34],[10,"emit_tuple_struct_arg","","",34],[10,"emit_option","","",34],[10,"emit_option_none","","",34],[10,"emit_option_some","","",34],[10,"emit_seq","","",34],[10,"emit_seq_elt","","",34],[10,"emit_map","","",34],[10,"emit_map_elt_key","","",34],[10,"emit_map_elt_val","","",34],[10,"new","","Creates a new encoder whose output will be written to the specified writer",35],[10,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35],[10,"emit_nil","","",35],[10,"emit_uint","","",35],[10,"emit_u64","","",35],[10,"emit_u32","","",35],[10,"emit_u16","","",35],[10,"emit_u8","","",35],[10,"emit_int","","",35],[10,"emit_i64","","",35],[10,"emit_i32","","",35],[10,"emit_i16","","",35],[10,"emit_i8","","",35],[10,"emit_bool","","",35],[10,"emit_f64","","",35],[10,"emit_f32","","",35],[10,"emit_char","","",35],[10,"emit_str","","",35],[10,"emit_enum","","",35],[10,"emit_enum_variant","","",35],[10,"emit_enum_variant_arg","","",35],[10,"emit_enum_struct_variant","","",35],[10,"emit_enum_struct_variant_field","","",35],[10,"emit_struct","","",35],[10,"emit_struct_field","","",35],[10,"emit_tuple","","",35],[10,"emit_tuple_arg","","",35],[10,"emit_tuple_struct","","",35],[10,"emit_tuple_struct_arg","","",35],[10,"emit_option","","",35],[10,"emit_option_none","","",35],[10,"emit_option_some","","",35],[10,"emit_seq","","",35],[10,"emit_seq_elt","","",35],[10,"emit_map","","",35],[10,"emit_map_elt_key","","",35],[10,"emit_map_elt_val","","",35],[10,"encode","","",27],[10,"from_reader","","Decodes a json value from an `&mut io::Reader`",27],[10,"from_str","","Decodes a json value from a string",27],[10,"to_writer","","Encodes a json value into an io::writer. Uses a single line.",27],[10,"to_pretty_writer","","Encodes a json value into an io::writer.\nPretty-prints in a more readable format.",27],[10,"to_pretty_str","","Encodes a json value into a string",27],[10,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27],[10,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27],[10,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27],[10,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27],[10,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27],[10,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27],[10,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27],[10,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27],[10,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27],[10,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27],[10,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27],[10,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27],[10,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27],[10,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27],[10,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27],[10,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27],[10,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27],[10,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27],[10,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27],[10,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27],[10,"index","","",27],[10,"index","","",27],[10,"fmt","","",31],[10,"clone","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"fmt","","",32],[10,"clone","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"new","","",36],[10,"len","","Returns The number of elements in the Stack.",36],[10,"is_empty","","Returns true if the stack is empty.",36],[10,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36],[10,"is_equal_to","","Compares this stack with an array of StackElements.",36],[10,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36],[10,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36],[10,"top","","Returns the top-most element (if any).",36],[10,"next","","",37],[10,"new","","Creates the JSON parser.",37],[10,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37],[10,"new","","Create a JSON Builder.",38],[10,"build","","",38],[10,"new","","Creates a new decoder instance for decoding the specified JSON value.",39],[10,"read_nil","","",39],[10,"read_uint","","",39],[10,"read_u8","","",39],[10,"read_u16","","",39],[10,"read_u32","","",39],[10,"read_u64","","",39],[10,"read_int","","",39],[10,"read_i8","","",39],[10,"read_i16","","",39],[10,"read_i32","","",39],[10,"read_i64","","",39],[10,"read_f32","","",39],[10,"read_f64","","",39],[10,"read_bool","","",39],[10,"read_char","","",39],[10,"read_str","","",39],[10,"read_enum","","",39],[10,"read_enum_variant","","",39],[10,"read_enum_variant_arg","","",39],[10,"read_enum_struct_variant","","",39],[10,"read_enum_struct_variant_field","","",39],[10,"read_struct","","",39],[10,"read_struct_field","","",39],[10,"read_tuple","","",39],[10,"read_tuple_arg","","",39],[10,"read_tuple_struct","","",39],[10,"read_tuple_struct_arg","","",39],[10,"read_option","","",39],[10,"read_seq","","",39],[10,"read_seq_elt","","",39],[10,"read_map","","",39],[10,"read_map_elt_key","","",39],[10,"read_map_elt_val","","",39],[10,"error","","",39],[10,"to_json","","",27],[10,"to_json","collections::string","",0],[10,"to_json","collections::vec","",3],[10,"to_json","collections::btree::map","",12],[10,"to_json","std::collections::hash::map","",15],[10,"to_json","core::option","",4],[10,"fmt","rustc-serialize::json","Encodes a json value into a string",27],[10,"from_str","","",27],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[6,"Decoder","rustc-serialize",""],[9,"read_nil","","",40],[9,"read_uint","","",40],[9,"read_u64","","",40],[9,"read_u32","","",40],[9,"read_u16","","",40],[9,"read_u8","","",40],[9,"read_int","","",40],[9,"read_i64","","",40],[9,"read_i32","","",40],[9,"read_i16","","",40],[9,"read_i8","","",40],[9,"read_bool","","",40],[9,"read_f64","","",40],[9,"read_f32","","",40],[9,"read_char","","",40],[9,"read_str","","",40],[9,"read_enum","","",40],[9,"read_enum_variant","","",40],[9,"read_enum_variant_arg","","",40],[9,"read_enum_struct_variant","","",40],[9,"read_enum_struct_variant_field","","",40],[9,"read_struct","","",40],[9,"read_struct_field","","",40],[9,"read_tuple","","",40],[9,"read_tuple_arg","","",40],[9,"read_tuple_struct","","",40],[9,"read_tuple_struct_arg","","",40],[9,"read_option","","",40],[9,"read_seq","","",40],[9,"read_seq_elt","","",40],[9,"read_map","","",40],[9,"read_map_elt_key","","",40],[9,"read_map_elt_val","","",40],[9,"error","","",40],[6,"Encoder","",""],[9,"emit_nil","","",41],[9,"emit_uint","","",41],[9,"emit_u64","","",41],[9,"emit_u32","","",41],[9,"emit_u16","","",41],[9,"emit_u8","","",41],[9,"emit_int","","",41],[9,"emit_i64","","",41],[9,"emit_i32","","",41],[9,"emit_i16","","",41],[9,"emit_i8","","",41],[9,"emit_bool","","",41],[9,"emit_f64","","",41],[9,"emit_f32","","",41],[9,"emit_char","","",41],[9,"emit_str","","",41],[9,"emit_enum","","",41],[9,"emit_enum_variant","","",41],[9,"emit_enum_variant_arg","","",41],[9,"emit_enum_struct_variant","","",41],[9,"emit_enum_struct_variant_field","","",41],[9,"emit_struct","","",41],[9,"emit_struct_field","","",41],[9,"emit_tuple","","",41],[9,"emit_tuple_arg","","",41],[9,"emit_tuple_struct","","",41],[9,"emit_tuple_struct_arg","","",41],[9,"emit_option","","",41],[9,"emit_option_none","","",41],[9,"emit_option_some","","",41],[9,"emit_seq","","",41],[9,"emit_seq_elt","","",41],[9,"emit_map","","",41],[9,"emit_map_elt_key","","",41],[9,"emit_map_elt_val","","",41],[6,"Decodable","",""],[9,"decode","","",42],[6,"Encodable","",""],[9,"encode","","",43],[6,"DecoderHelpers","",""],[9,"read_to_vec","","",44],[6,"EncoderHelpers","",""],[9,"emit_from_vec","","",45]],"paths":[[1,"String"],[1,"Box"],[1,"Rc"],[1,"Vec"],[2,"Option"],[1,"Path"],[1,"Path"],[1,"Cell"],[1,"RefCell"],[1,"Arc"],[1,"DList"],[1,"RingBuf"],[1,"BTreeMap"],[1,"BTreeSet"],[1,"EnumSet"],[1,"HashMap"],[1,"HashSet"],[1,"VecMap"],[1,"Config"],[2,"CharacterSet"],[2,"Newline"],[2,"FromBase64Error"],[6,"ToBase64"],[6,"FromBase64"],[2,"FromHexError"],[6,"ToHex"],[6,"FromHex"],[2,"Json"],[2,"ErrorCode"],[2,"ParserError"],[2,"DecoderError"],[2,"JsonEvent"],[2,"StackElement"],[6,"ToJson"],[1,"Encoder"],[1,"PrettyEncoder"],[1,"Stack"],[1,"Parser"],[1,"Builder"],[1,"Decoder"],[6,"Decoder"],[6,"Encoder"],[6,"Decodable"],[6,"Encodable"],[6,"DecoderHelpers"],[6,"EncoderHelpers"]]};

initSearch(searchIndex);
